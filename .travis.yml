language: python
sudo: false
fast_finish: true
python:
  - 2.7
  - 3.4
env:
  global:
    # ANACONDA_TOKEN
    - secure: "HlTfqMSkU4yFTGSHvCg1FJ5gQaHA7SVWtH/h9uHHNArowBNqF0c9nJQcPNydi1szzGE+29ZiUwbj1AMI3CgpevZuowrxwMNlsEXol7uSxMJGczFEfauREEKfX0rEOzHcIRxlN6tC8AEBXnxBNesLbw9XadB+lJ/y7Fkfl28n5oU="
  matrix:
    - PANDAS_VERSION=0.16.1 NUMPY_VERSION=1.9.2 SCIPY_VERSION=0.15.1
    - PANDAS_VERSION=0.17.1 NUMPY_VERSION=1.10.4 SCIPY_VERSION=0.16.1
cache:
  directories:
    - $HOME/.cache/.pip/

before_install:
  - if [ ${TRAVIS_PYTHON_VERSION:0:1} == "2" ]; then wget https://repo.continuum.io/miniconda/Miniconda-3.7.0-Linux-x86_64.sh -O miniconda.sh; else wget https://repo.continuum.io/miniconda/Miniconda3-3.7.0-Linux-x86_64.sh -O miniconda.sh; fi
  - chmod +x miniconda.sh
  - ./miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - sed -i "s/numpy==.*/numpy==$NUMPY_VERSION/" etc/requirements.txt
  - sed -i "s/pandas==.*/pandas==$PANDAS_VERSION/" etc/requirements.txt
  - sed -i "s/scipy==.*/scipy==$SCIPY_VERSION/" etc/requirements.txt
install:
  - conda install conda-build=1.19.0 anaconda-client=1.3.1 --yes

  - conda create -n testenv --yes -c quantopian pip python=$TRAVIS_PYTHON_VERSION numpy=$NUMPY_VERSION scipy=$SCIPY_VERSION libgfortran=1.0 ta-lib=0.4.9
  - source activate testenv
  - IFS='.' read -r -a NPY_VERSION_ARR <<< "$NUMPY_VERSION"
  - NPY_VERSION_MAJ_MIN=${NPY_VERSION_ARR[0]}${NPY_VERSION_ARR[1]}
  - CACHE_DIR="$HOME/.cache/.pip/pip_np""$NPY_VERSION_MAJ_MIN"
  - echo $CACHE_DIR
  - pip install --upgrade pip coverage coveralls --cache-dir=$CACHE_DIR
  - pip install -r etc/requirements.txt --cache-dir=$CACHE_DIR
  - pip install -r etc/requirements_dev.txt --cache-dir=$CACHE_DIR
  - pip install -r etc/requirements_blaze.txt --cache-dir=$CACHE_DIR  # this uses git requirements right now
  - pip install -e .[talib] --cache-dir=$CACHE_DIR
before_script:
  - pip freeze | sort
script:
  - |
    for recipe in $(ls -d conda/*/ | xargs -I {} basename {}); do
      if [[ "$recipe" = "zipline" ]]; then continue; fi

      conda build conda/$recipe --python=$TRAVIS_PYTHON_VERSION --numpy=$NPY_VERSION_MAJ_MIN --skip-existing -c quantopian
      RECIPE_OUTPUT=$(conda build conda/$recipe --python=$TRAVIS_PYTHON_VERSION --numpy=$NPY_VERSION_MAJ_MIN --output)
      if [[ -f "$RECIPE_OUTPUT" && "$TRAVIS_SECURE_ENV_VARS" = "true" ]]; then anaconda -t $ANACONDA_TOKEN upload "$RECIPE_OUTPUT" -u quantopian --label ci; fi
    done
  # Make a deep clone so the conda build can clone it.
  - git fetch --unshallow
  - conda build conda/zipline --python=$TRAVIS_PYTHON_VERSION --numpy=$NPY_VERSION_MAJ_MIN -c quantopian
  - if [[ "$TRAVIS_SECURE_ENV_VARS" = "true" ]]; then anaconda -t $ANACONDA_TOKEN upload `conda build conda/zipline --python=$TRAVIS_PYTHON_VERSION --numpy=$NPY_VERSION_MAJ_MIN --output` -u quantopian --label ci; fi

  - nosetests tests/
  - flake8 zipline tests
after_success:
  - coveralls

branches:
  only:
    - master
